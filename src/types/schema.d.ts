/* tslint:disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  posts?: Array<GQLPost | null>;
}

export interface GQLPost {
  comments?: Array<GQLComment | null>;
  id: string;
  text: string;
  tags?: Array<string | null>;
}

export interface GQLComment {
  id: string;
  text: string;
}

export interface GQLMutation {
  createPost?: GQLPost;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  Post?: GQLPostTypeResolver;
  Comment?: GQLCommentTypeResolver;
  Mutation?: GQLMutationTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  posts?: QueryToPostsResolver<TParent>;
}

export interface QueryToPostsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPostTypeResolver<TParent = any> {
  comments?: PostToCommentsResolver<TParent>;
  id?: PostToIdResolver<TParent>;
  text?: PostToTextResolver<TParent>;
  tags?: PostToTagsResolver<TParent>;
}

export interface PostToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostToTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PostToTagsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommentTypeResolver<TParent = any> {
  id?: CommentToIdResolver<TParent>;
  text?: CommentToTextResolver<TParent>;
}

export interface CommentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  createPost?: MutationToCreatePostResolver<TParent>;
}

export interface MutationToCreatePostArgs {
  text?: string;
}
export interface MutationToCreatePostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreatePostArgs, context: any, info: GraphQLResolveInfo): TResult;
}
